<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd
	    http://www.springframework.org/schema/jdbc
	    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	    http://www.springframework.org/schema/cache
	    http://www.springframework.org/schema/cache/spring-cache.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util.xsd">

    <context:component-scan base-package="com.tian.cola"/>

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    	<property name="locations">
    		<list>
    			<value>classpath:core/jdbc.properties</value>
    		</list>
    	</property>
    </bean>
    <!-- dataSource配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
    	
    	<property name="initialSize" value="${ds.initialSize}"/>
    	<property name="minIdle" value="${ds.minIdle}"/>
    	<property name="maxActive" value="${ds.maxActive}"/>
    	<!-- 连接等待时间 -->
    	<property name="maxWait" value="${ds.maxWait}"/>
    	
    	<property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>
    	<!-- 连接在连接池中最小生存时间 -->
    	<property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>
    	<!-- 
    	<property name="validationQuery" value="SELECT 'x'"/>
    	<property name="testWhileIdle" value="true"/>
    	<property name="testOnBorrow" value="false"/>
    	<property name="testOnReturn" value="false"/>
    	 -->
    	 <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    	 <property name="poolPreparedStatements" value="false"/>
    	 <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
    	 <!-- 配置监控统计拦截的filters -->
    	 <property name="filters" value="stat"/>
    </bean>
    <!-- mybatis配置文件，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
    p:dataSource-ref="dataSource"
    p:configLocation="classpath:core/mybatis-config.xml"
    p:mapperLocations="classpath:mappers/*.xml">
    </bean>
    
    <!-- 事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    p:dataSource-ref="dataSource">
    </bean>
    
    <!-- 事务管理通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
    		<tx:method name="insert" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
    		<tx:method name="update" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
    		<tx:method name="delete" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
    		<!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
    		<tx:method name="select*" read-only="true"/>
    		<tx:method name="count*" read-only="true"/>
    		
    		<!-- 对其他方法,使用默认的事务管理 -->
    		<tx:method name="*"/>
    	</tx:attributes>
    </tx:advice>
    
    <!-- 事务aop -->
    <aop:config>
    	<aop:pointcut id="serviceMethods" expression="execution(* com.tian.cola.service..*(..))"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>
    <!-- 采用CGLib代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    
    <!-- 启用事务注解支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- cache配置 -->
    <!-- 
    <cache:annotation-driven cache-manager="cacheManager"/>
    <bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
    p:configLocation="classpath:ehcache.xml"></bean>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
    p:cacheManager-ref="ehCacheManagerFactory"></bean>
     -->
</beans>